import 'dart:io';
import 'package:concieltalk/constants/color_constants.dart';
import 'package:concieltalk/utils/ui/ring_widgets.dart';
import 'package:concieltalk/drawers/rotating_drawer.dart';

import 'package:concieltalk/utils/common_widgets/base_ring_state.dart';
import 'package:concieltalk/utils/search/map_locations.dart' as locations;
import 'package:concieltalk/utils/ui/header_footer.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:geocoding/geocoding.dart';
import 'package:geolocator/geolocator.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:vrouter/vrouter.dart';

class MapSearch extends StatefulWidget {
  final String? address;
  const MapSearch({Key? key, this.address}) : super(key: key);

  @override
  MapSearchState createState() => MapSearchState();
}

class MapSearchState extends State<MapSearch> {
  final Map<String, Marker> _markers = {};
  late locations.Locations outletLocations;
  final GlobalKey<BaseRingState> _widgetKey = GlobalKey();
  String? address;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      setState(() {
        final vRouter = VRouter.of(context);
        address = vRouter.queryParameters['address'] ?? widget.address;
      });
    });
  }

  void callPhoneNumber(String phoneNumber) async {
    final status = await Permission.phone.status;
    if (status.isDenied) {
      // We didn't ask for permission yet or the permission has been denied before but not permanently.
      await Permission.phone.request();
    }
    if (await Permission.phone.isGranted) {
      if (Platform.isAndroid) {
        const platform = MethodChannel('samples.flutter.dev/phone');
        try {
          await platform
              .invokeMethod('makePhoneCall', {'phoneNumber': phoneNumber});
        } on PlatformException catch (e) {
          throw 'Error Occurred: ${e.message}';
        }
      } else {
        // Handle other platforms
      }
    } else {
      // The permission is permanently denied or the user denied the permission this time.
      // You can show a dialog explaining why the app needs this permission and how to enable it in the app settings.
    }
  }

  Future<void> openDialog(outlet) async {
    switch (await showDialog(
      context: context,
      builder: (BuildContext ctx) {
        return SimpleDialog(
          surfaceTintColor: personalColorScheme.onSurfaceVariant,
          title: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Text(
                textAlign: TextAlign.center,
                style: TextStyle(color: personalColorScheme.primary),
                "Call",
              ),
            ],
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(10),
          ),
          children: [
            Text(
              outlet.title,
              style: const TextStyle(color: Colors.white),
              textAlign: TextAlign.center,
            ),
            Text(
              outlet.phone,
              textAlign: TextAlign.center,
            ),
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceEvenly,
              children: [
                SimpleDialogOption(
                  onPressed: () {
                    Navigator.pop(context, 0);
                  },
                  child: const Text(
                    'Cancel',
                  ),
                ),
                SimpleDialogOption(
                  onPressed: () {
                    Navigator.pop(context, 1);
                  },
                  child: Container(
                    decoration: BoxDecoration(
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Text(
                      style: TextStyle(
                        fontWeight: FontWeight.bold,
                        color: personalColorScheme.secondary,
                      ),
                      'YES',
                    ),
                  ),
                )
              ],
            )
          ],
        );
      },
    )) {
      case 0:
        return;
      case 1:
        callPhoneNumber(outlet.phone);
    }
  }

  Future<List<Location>> _getLocation() async {
    if (address == 'home') {
      final LocationPermission permission =
          await Geolocator.requestPermission();
      if (permission == LocationPermission.denied) {
        if (mounted) {
          VRouter.of(context).to('/talk');
        }
        return [];
      } else {
        final Position position = await Geolocator.getCurrentPosition(
          desiredAccuracy: LocationAccuracy.high,
        );
        return [
          Location(
            latitude: position.latitude,
            longitude: position.longitude,
            timestamp: DateTime.now(),
          )
        ];
      }
    } else {
      return locationFromAddress(address!);
    }
  }

  Future<void> _onMapCreated(GoogleMapController controller) async {
    outletLocations = await locations.getMapMarkers();
    setState(() {
      _markers.clear();
      for (final outlet in outletLocations.outlets) {
        final marker = Marker(
          consumeTapEvents: true,
          icon: BitmapDescriptor.defaultMarkerWithHue(
            BitmapDescriptor.hueAzure,
          ),
          markerId: MarkerId(outlet.title),
          position: LatLng(outlet.lat, outlet.lng),
          infoWindow: InfoWindow(
            title: outlet.title,
            snippet: "${outlet.address}\n${outlet.phone}",
          ),
          onTap: () {
            showModalBottomSheet(
              context: context,
              builder: (context) => SizedBox(
                width: double.infinity,
                height: MediaQuery.sizeOf(context).height * 0.2,
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.center,
                  mainAxisAlignment: MainAxisAlignment.start,
                  children: [
                    const SizedBox(height: 10),
                    Text(
                      outlet.title,
                      style: TextStyle(
                        color: personalColorScheme.secondary,
                        fontWeight: FontWeight.bold,
                      ),
                    ),
                    const SizedBox(height: 10),
                    Text(outlet.address),
                    const SizedBox(height: 10),
                    InkWell(
                      splashColor: personalColorScheme.secondary,
                      onTap: () {
                        openDialog(outlet);
                      },
                      child: Row(
                        crossAxisAlignment: CrossAxisAlignment.center,
                        mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                        children: [
                          Text(
                            outlet.phone,
                            style: TextStyle(
                              color: personalColorScheme.primary,
                            ),
                          ),
                          Icon(
                            Icons.phone_android_sharp,
                            color: personalColorScheme.primary,
                          ),
                        ],
                      ),
                    )
                  ],
                ),
              ),
            );
          },
        );
        _markers[outlet.title] = marker;
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      extendBodyBehindAppBar: false,
      appBar: AppBar(
        titleSpacing: 0,
        automaticallyImplyLeading: false,
        actions: <Widget>[Container()],
        toolbarHeight: MediaQuery.of(context).padding.top + 15,
        clipBehavior: Clip.none,
        title: const Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            DefaultHeaderWidget(route: '/maps'),
            Padding(
              padding: EdgeInsets.only(top: 5),
            ),
          ],
        ),
      ),
      body: FutureBuilder<List<Location>>(
        future: _getLocation(),
        builder: (context, snapshot) {
          if (snapshot.hasData) {
            final locations = snapshot.data!;
            if (locations.isEmpty) {
              VRouter.of(context).to('/talk');
              return const Center(
                child: Text('Location data not available'),
              );
            } else {
              final lat = locations.first.latitude;
              final lng = locations.first.longitude;
              final markers = _markers;
              final marker = Marker(
                position: LatLng(lat, lng),
                markerId: const MarkerId('user'),
                icon: BitmapDescriptor.defaultMarkerWithHue(
                  BitmapDescriptor.hueViolet,
                ),
              );
              markers['user'] = marker;
              return GoogleMap(
                mapToolbarEnabled: false,
                onMapCreated: _onMapCreated,
                initialCameraPosition: CameraPosition(
                  target: LatLng(lat, lng),
                  zoom: 15.0,
                ),
                markers: markers.values.toSet(),
                mapType: MapType.normal,
                tiltGesturesEnabled: true,
                compassEnabled: true,
                rotateGesturesEnabled: true,
                myLocationEnabled: true,
              );
            }
          } else {
            _widgetKey.currentState?.animateColors();
            return Center(
              child: RingWidget(
                key: _widgetKey,
                trackColor: personalColorScheme.surfaceVariant,
                innerRingColor: personalColorScheme.background,
                animateNow: false,
              ),
            );
          }
        },
      ),
    );
  }
}
