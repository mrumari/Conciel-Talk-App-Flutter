import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:image_picker/image_picker.dart';
import 'package:flutter/material.dart';


class ProfilePage extends StatefulWidget {
  const ProfilePage({Key? key}) : super(key: key);

  @override
  ProfilePageState createState() => ProfilePageState();
}

class ProfilePageState extends State<ProfilePage> {
  TextEditingController? displayNameController;
  TextEditingController? aboutMeController;
  TextEditingController _phoneController = TextEditingController();

  late String currentUserId;
  String dialCodeDigits = '';
  String id = '';
  String displayName = '';
  String photoUrl = '';
  String phoneNumber = '';
  String aboutMe = '';
  String countryCode = '';

  bool isLoading = false;
  File? avatarImageFile;
  late ProfileProvider profileProvider;

  final FocusNode focusNodeNickname = FocusNode();

  @override
  void initState() {
    super.initState();
    initProfileProvider();
  }

  Future<void> initProfileProvider() async {
    final prefs = await SharedPreferences.getInstance();
    profileProvider = ProfileProvider(
      prefs: prefs,
      firebaseStorage: FirebaseStorage.instance,
      firebaseFirestore: FirebaseFirestore.instance,
    );
  }

  void readLocal() {
    id = profileProvider.getPrefs(FirestoreConstants.id) ?? "";
    displayName =
        profileProvider.getPrefs(FirestoreConstants.displayName) ?? "";
    photoUrl = profileProvider.getPrefs(FirestoreConstants.photoUrl) ?? "";
    phoneNumber =
        profileProvider.getPrefs(FirestoreConstants.phoneNumber) ?? "";
    aboutMe = profileProvider.getPrefs(FirestoreConstants.aboutMe) ?? "";
    displayNameController = TextEditingController(text: displayName);
    aboutMeController = TextEditingController(text: aboutMe);
  }

  Future getImage() async {
    ImagePicker imagePicker = ImagePicker();
    // PickedFile is not supported
    // Now use XFile?
    XFile? pickedFile = await imagePicker
        .pickImage(source: ImageSource.gallery)
        .catchError((onError) {
      Fluttertoast.showToast(msg: onError.toString());
      return null;
    });
    File? image;
    if (pickedFile != null) {
      image = File(pickedFile.path);
    }
    if (image != null) {
      setState(() {
        avatarImageFile = image;
        isLoading = true;
      });
      uploadFile();
    }
  }

  Future uploadFile() async {
    String fileName = id;
    UploadTask uploadTask =
        profileProvider.uploadImageFile(avatarImageFile!, fileName);
    try {
      TaskSnapshot snapshot = await uploadTask;
      photoUrl = await snapshot.ref.getDownloadURL();
      ChatUser updateInfo = ChatUser(
          id: id,
          photoUrl: photoUrl,
          displayName: displayName,
          phoneNumber: phoneNumber,
          aboutMe: aboutMe);
      profileProvider
          .updateFirestoreData(
              FirestoreConstants.pathUserCollection, id, updateInfo.toJson())
          .then((value) async {
        await profileProvider.setPrefs(FirestoreConstants.photoUrl, photoUrl);
        setState(() {
          isLoading = false;
        });
      });
    } on FirebaseException catch (e) {
      setState(() {
        isLoading = false;
      });
      Fluttertoast.showToast(msg: e.toString());
    }
  }

  void updateFirestoreData() {
    focusNodeNickname.unfocus();
    setState(() {
      isLoading = true;
      if (dialCodeDigits != "+00" && _phoneController.text != "") {
        phoneNumber = dialCodeDigits + _phoneController.text.toString();
      }
    });
    ChatUser updateInfo = ChatUser(
        id: id,
        photoUrl: photoUrl,
        displayName: displayName,
        phoneNumber: phoneNumber,
        aboutMe: aboutMe);
    profileProvider
        .updateFirestoreData(
            FirestoreConstants.pathUserCollection, id, updateInfo.toJson())
        .then((value) async {
      await profileProvider.setPrefs(
          FirestoreConstants.displayName, displayName);
      await profileProvider.setPrefs(
          FirestoreConstants.phoneNumber, phoneNumber);
      await profileProvider.setPrefs(
        FirestoreConstants.photoUrl,
        photoUrl,
      );
      await profileProvider.setPrefs(FirestoreConstants.aboutMe, aboutMe);

      setState(() {
        isLoading = false;
      });
      Fluttertoast.showToast(msg: 'UpdateSuccess');
    }).catchError((onError) {
      Fluttertoast.showToast(msg: onError.toString());
    });
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder(
        future: initProfileProvider(),
        builder: (context, snapshot) {
          if (snapshot.connectionState == ConnectionState.done) {
            readLocal();

            _phoneController = TextEditingController(text: phoneNumber);
            aboutMeController = TextEditingController(text: aboutMe);
            countryCode = phoneNumber.substring(0, 3);
            return Scaffold(
              appBar: AppBar(
                title: const Text(
                  Conciel.profileTitle,
                ),
              ),
              body: WillPopScope(
                onWillPop: null,
                child: Stack(
                  children: [
                    SingleChildScrollView(
                      keyboardDismissBehavior:
                          ScrollViewKeyboardDismissBehavior.onDrag,
                      padding: const EdgeInsets.all(16),
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          GestureDetector(
                            onTap: getImage,
                            child: Container(
                              alignment: Alignment.center,
                              margin: const EdgeInsets.all(20),
                              child: avatarImageFile == null
                                  ? photoUrl.isNotEmpty
                                      ? ClipRRect(
                                          borderRadius:
                                              BorderRadius.circular(60),
                                          child: Image.network(
                                            photoUrl,
                                            fit: BoxFit.cover,
                                            width: 120,
                                            height: 120,
                                            errorBuilder:
                                                (context, object, stackTrace) {
                                              return const Icon(
                                                Icons.account_circle,
                                                size: 90,
                                              );
                                            },
                                            loadingBuilder:
                                                (BuildContext context,
                                                    Widget child,
                                                    ImageChunkEvent?
                                                        loadingProgress) {
                                              if (loadingProgress == null) {
                                                return child;
                                              }
                                              return SizedBox(
                                                width: 90,
                                                height: 90,
                                                child: Center(
                                                  child:
                                                      CircularProgressIndicator(
                                                    value: loadingProgress
                                                                .expectedTotalBytes !=
                                                            null
                                                        ? loadingProgress
                                                                .cumulativeBytesLoaded /
                                                            loadingProgress
                                                                .expectedTotalBytes!
                                                        : null,
                                                  ),
                                                ),
                                              );
                                            },
                                          ),
                                        )
                                      : const Icon(
                                          Icons.account_circle,
                                          size: 90,
                                        )
                                  : ClipRRect(
                                      borderRadius: BorderRadius.circular(60),
                                      child: Image.file(
                                        avatarImageFile!,
                                        width: 120,
                                        height: 120,
                                        fit: BoxFit.cover,
                                      ),
                                    ),
                            ),
                          ),
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.stretch,
                            children: [
                              const Text(
                                'Name',
                                style: TextStyle(
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              TextField(
                                decoration: kTextInputDecoration.copyWith(
                                    hintText: 'Write your Name'),
                                controller: displayNameController,
                                onChanged: (value) {
                                  displayName = value;
                                },
                                focusNode: focusNodeNickname,
                              ),
                              vertical15,
                              const Text(
                                'About Me...',
                                style: TextStyle(
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              TextField(
                                decoration: kTextInputDecoration.copyWith(
                                    hintText: 'Write about yourself...'),
                                controller: aboutMeController,
                                onChanged: (value) {
                                  aboutMe = value;
                                },
                              ),
                              vertical15,
                              const Text(
                                'Select Country Code',
                                style: TextStyle(
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              Container(
                                width: double.infinity,
                                alignment: Alignment.centerLeft,
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(10),
                                ),
                                child: CountryCodePicker(
                                  onChanged: (country) {
                                    setState(() {
                                      dialCodeDigits = country.dialCode!;
                                    });
                                  },
                                  initialSelection: countryCode,
                                  showCountryOnly: false,
                                  showOnlyCountryWhenClosed: false,
                                  favorite: const ["+1", "US", "+91", "IN"],
                                ),
                              ),
                              vertical15,
                              const Text(
                                'Phone Number',
                                style: TextStyle(
                                  fontStyle: FontStyle.italic,
                                  fontWeight: FontWeight.bold,
                                ),
                              ),
                              TextField(
                                decoration: kTextInputDecoration.copyWith(
                                  hintText: 'Phone Number',
                                  prefix: Padding(
                                    padding: const EdgeInsets.all(4),
                                    child: Text(
                                      dialCodeDigits,
                                    ),
                                  ),
                                ),
                                controller: _phoneController,
                                maxLength: 12,
                                keyboardType: TextInputType.number,
                              ),
                            ],
                          ),
                          ElevatedButton(
                              onPressed: updateFirestoreData,
                              child: const Padding(
                                padding: EdgeInsets.all(8.0),
                                child: Text('Update Info'),
                              )),
                        ],
                      ),
                    ),
                    Positioned(
                        child: isLoading
                            ? const CircularProgressIndicator()
                            : const SizedBox.shrink()),
                  ],
                ),
              ),
            );
          } else {
            return const CircularProgressIndicator();
          }
        });
  }
}
